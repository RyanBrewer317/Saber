// some polymorphic church-numeral arithmetic
fn zero(@t: type, z: t, s: t->t) -> t {
  z
}

fn succ(@t: type, z: t, s: t->t) -> t->t {
  s
}

fn thrice(@t: type, z: t, s: t->t) -> t {
  s(s(s(z)))
}

// specializing to a concrete type
fn thrice_int(z: int, s: int->int) -> int {
  thrice(int, z, s)
}

// takes a function with two types, int->int and (int->int)->(int->int),
// and specializes it to the first of the two types.
// Note that this type is only inhabited by the identity function,
// so that is what test1 returns
fn test1(a: inter{x: int->int, y: (int->int)->(int->int)}) -> int->int {
  a.0
}

// creating an intersection value (the equality of the fields is checked during typechecking),
// giving it to `test1`, which simply specializes it to the identity on integers,
// and giving the given integer to that identity function.
// Therefore `test2` is itself an identity function.
fn test2(i: int) -> int {
  test1([
    x: (fn(n: int) n): int->int, 
    y: (fn(f: int->int) f): (int->int)->(int->int)
  ])(i)
}

// call the identity function on 1 three times, like id(id(id(1))), and print the result
fn main() -> int {
  print(thrice_int(1, test2))
}

// I know that this typechecking works because I had many type errors while trying to write this demo!